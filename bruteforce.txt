Brute Force Protection
Laravel includes rate limiting out of the box. 

`php artisan make:provider RouteServiceProvider`

Add the ff code:

<?php

namespace App\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Support\Facades\RateLimiter;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to the "home" route for your application.
     *
     * This is used by Laravel authentication to redirect users after login.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::middleware('web')
                ->group(base_path('routes/web.php'));

            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        RateLimiter::for('login', function ($request) {
            return Limit::perMinute(5)->by($request->email . $request->ip());
        });
    }
}



Update the login route in auth.php to include throttling:

Route::post('login', [AuthenticatedSessionController::class, 'store'])->middleware('throttle:login');

Config/app.php
add the ff:

/*
|--------------------------------------------------------------------------
| Service Providers
|--------------------------------------------------------------------------
|
*/

'providers' => [
    // Other Service Providers
    App\Providers\RouteServiceProvider::class,
],

Clear Cache and Test

php artisan cache:clear
php artisan route:clear
php artisan config:clear
composer dump-autoload
php artisan serve
